// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul_matrixmul,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-sfva784-1-i,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.865000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=61,HLS_SYN_LUT=499,HLS_VERSION=2021_1}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0,
        res_q0,
        res1_address0,
        res1_ce0,
        res1_we0,
        res1_d0,
        res1_address1,
        res1_ce1,
        res1_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;
input  [15:0] res_q0;
output  [3:0] res1_address0;
output   res1_ce0;
output   res1_we0;
output  [15:0] res1_d0;
output  [3:0] res1_address1;
output   res1_ce1;
input  [15:0] res1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] res_address0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_idle;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready;
wire   [3:0] grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0;
wire   [15:0] grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0;
wire   [3:0] grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0;
wire   [3:0] grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0;
wire    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_idle;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready;
wire   [3:0] grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0;
wire   [3:0] grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0;
wire   [15:0] grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0;
wire   [3:0] grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1;
wire    grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1;
reg    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg = 1'b0;
#0 grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg = 1'b0;
end

matrixmul_matrixmul_Pipeline_Row_Col_Product grp_matrixmul_Pipeline_Row_Col_Product_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start),
    .ap_done(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done),
    .ap_idle(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_idle),
    .ap_ready(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready),
    .res_address0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0),
    .res_ce0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0),
    .res_we0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0),
    .res_d0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0),
    .a_address0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0),
    .a_ce0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0),
    .a_q0(a_q0),
    .b_address0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0),
    .b_ce0(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0),
    .b_q0(b_q0)
);

matrixmul_matrixmul_Pipeline_Row1_Col2 grp_matrixmul_Pipeline_Row1_Col2_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start),
    .ap_done(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done),
    .ap_idle(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_idle),
    .ap_ready(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready),
    .res_address0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0),
    .res_ce0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0),
    .res_q0(res_q0),
    .res1_address0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0),
    .res1_ce0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0),
    .res1_we0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0),
    .res1_d0(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0),
    .res1_address1(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1),
    .res1_ce1(grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1),
    .res1_q1(res1_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready == 1'b1)) begin
            grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= 1'b1;
        end else if ((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready == 1'b1)) begin
            grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_address0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_address0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0;
    end else begin
        res_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_ce0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_ce0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        res_we0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0;

assign a_ce0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign b_address0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0;

assign b_ce0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0;

assign grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start = grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg;

assign grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg;

assign res1_address0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0;

assign res1_address1 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1;

assign res1_ce0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0;

assign res1_ce1 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1;

assign res1_d0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0;

assign res1_we0 = grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0;

assign res_d0 = grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0;

endmodule //matrixmul
