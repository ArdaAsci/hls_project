-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res1_ce0 : OUT STD_LOGIC;
    res1_we0 : OUT STD_LOGIC;
    res1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res1_ce1 : OUT STD_LOGIC;
    res1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-sfva784-1-i,HLS_INPUT_CLOCK=13.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.865000,HLS_SYN_LAT=43,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=61,HLS_SYN_LUT=499,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_idle : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_idle : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1 : STD_LOGIC;
    signal grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_matrixmul_Pipeline_Row_Col_Product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_we0 : OUT STD_LOGIC;
        res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        b_ce0 : OUT STD_LOGIC;
        b_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrixmul_matrixmul_Pipeline_Row1_Col2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res_ce0 : OUT STD_LOGIC;
        res_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        res1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res1_ce0 : OUT STD_LOGIC;
        res1_we0 : OUT STD_LOGIC;
        res1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        res1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        res1_ce1 : OUT STD_LOGIC;
        res1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_matrixmul_Pipeline_Row_Col_Product_fu_28 : component matrixmul_matrixmul_Pipeline_Row_Col_Product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start,
        ap_done => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done,
        ap_idle => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_idle,
        ap_ready => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready,
        res_address0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0,
        res_ce0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0,
        res_we0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0,
        res_d0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0,
        a_address0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0,
        a_ce0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0,
        a_q0 => a_q0,
        b_address0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0,
        b_ce0 => grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0,
        b_q0 => b_q0);

    grp_matrixmul_Pipeline_Row1_Col2_fu_38 : component matrixmul_matrixmul_Pipeline_Row1_Col2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start,
        ap_done => grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done,
        ap_idle => grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_idle,
        ap_ready => grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready,
        res_address0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0,
        res_ce0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0,
        res_q0 => res_q0,
        res1_address0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0,
        res1_ce0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0,
        res1_we0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0,
        res1_d0 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0,
        res1_address1 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1,
        res1_ce1 => grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1,
        res1_q1 => res1_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_ready = ap_const_logic_1)) then 
                    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done, grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_address0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_address0;
    a_ce0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_a_ce0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done)
    begin
        if ((grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done)
    begin
        if ((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_address0;
    b_ce0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_b_ce0;
    grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_ap_start_reg;
    grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_ap_start_reg;
    res1_address0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address0;
    res1_address1 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_address1;
    res1_ce0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce0;
    res1_ce1 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_ce1;
    res1_d0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_d0;
    res1_we0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res1_we0;

    res_address0_assign_proc : process(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0, grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_address0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_address0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_address0;
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0, grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_ce0 <= grp_matrixmul_Pipeline_Row1_Col2_fu_38_res_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_ce0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_ce0;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_d0;

    res_we0_assign_proc : process(grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_we0 <= grp_matrixmul_Pipeline_Row_Col_Product_fu_28_res_we0;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
