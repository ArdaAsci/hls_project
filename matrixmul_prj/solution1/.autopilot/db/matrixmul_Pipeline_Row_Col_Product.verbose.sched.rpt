

================================================================
== Vitis HLS Report for 'matrixmul_Pipeline_Row_Col_Product'
================================================================
* Date:           Thu Sep  2 13:46:02 2021

* Version:        2021.1 (Build 3247384 on Thu Jun 10 19:36:07 MDT 2021)
* Project:        matrixmul_prj
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: kintexu
* Target device:  xcku035-sfva784-1-i


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  13.33 ns|  5.865 ns|     3.60 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       29|       29|  0.387 us|  0.387 us|   29|   29|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- Row_Col_Product  |       27|       27|         2|          1|          1|    27|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 4.52>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%empty = alloca i32 1"   --->   Operation 5 'alloca' 'empty' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%k = alloca i32 1"   --->   Operation 6 'alloca' 'k' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%j = alloca i32 1"   --->   Operation 7 'alloca' 'j' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%indvar_flatten = alloca i32 1"   --->   Operation 8 'alloca' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%i = alloca i32 1"   --->   Operation 9 'alloca' 'i' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%indvar_flatten15 = alloca i32 1"   --->   Operation 10 'alloca' 'indvar_flatten15' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i16 %res, void @empty, i32 0, i32 0, void @empty_0, i32 4294967295, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 11 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i8 %b, void @empty, i32 0, i32 0, void @empty_0, i32 4294967295, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 12 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i8 %a, void @empty, i32 0, i32 0, void @empty_0, i32 4294967295, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0"   --->   Operation 13 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.62ns)   --->   "%store_ln0 = store i5 0, i5 %indvar_flatten15"   --->   Operation 14 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 15 [1/1] (0.62ns)   --->   "%store_ln0 = store i2 0, i2 %i"   --->   Operation 15 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 16 [1/1] (0.62ns)   --->   "%store_ln0 = store i4 0, i4 %indvar_flatten"   --->   Operation 16 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 17 [1/1] (0.62ns)   --->   "%store_ln0 = store i2 0, i2 %j"   --->   Operation 17 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 18 [1/1] (0.62ns)   --->   "%store_ln0 = store i2 0, i2 %k"   --->   Operation 18 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 19 [1/1] (0.62ns)   --->   "%store_ln0 = store i16 0, i16 %empty"   --->   Operation 19 'store' 'store_ln0' <Predicate = true> <Delay = 0.62>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%br_ln0 = br void"   --->   Operation 20 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%indvar_flatten15_load = load i5 %indvar_flatten15" [matrixmul.cpp:57]   --->   Operation 21 'load' 'indvar_flatten15_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (1.01ns)   --->   "%icmp_ln57 = icmp_eq  i5 %indvar_flatten15_load, i5 27" [matrixmul.cpp:57]   --->   Operation 22 'icmp' 'icmp_ln57' <Predicate = true> <Delay = 1.01> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.64> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (1.16ns)   --->   "%add_ln57_1 = add i5 %indvar_flatten15_load, i5 1" [matrixmul.cpp:57]   --->   Operation 23 'add' 'add_ln57_1' <Predicate = true> <Delay = 1.16> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%br_ln57 = br i1 %icmp_ln57, void %.split8, void %.preheader.preheader.preheader.exitStub" [matrixmul.cpp:57]   --->   Operation 24 'br' 'br_ln57' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "%k_load = load i2 %k" [matrixmul.cpp:62]   --->   Operation 25 'load' 'k_load' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "%j_load = load i2 %j" [matrixmul.cpp:57]   --->   Operation 26 'load' 'j_load' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "%indvar_flatten_load_1 = load i4 %indvar_flatten" [matrixmul.cpp:59]   --->   Operation 27 'load' 'indvar_flatten_load_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "%i_load = load i2 %i" [matrixmul.cpp:57]   --->   Operation 28 'load' 'i_load' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (0.72ns)   --->   "%add_ln57 = add i2 %i_load, i2 1" [matrixmul.cpp:57]   --->   Operation 29 'add' 'add_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.72> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (1.03ns)   --->   "%icmp_ln59 = icmp_eq  i4 %indvar_flatten_load_1, i4 9" [matrixmul.cpp:59]   --->   Operation 30 'icmp' 'icmp_ln59' <Predicate = (!icmp_ln57)> <Delay = 1.03> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.64> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.50ns)   --->   "%select_ln57 = select i1 %icmp_ln59, i2 0, i2 %j_load" [matrixmul.cpp:57]   --->   Operation 31 'select' 'select_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.50> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.50ns)   --->   "%select_ln57_1 = select i1 %icmp_ln59, i2 %add_ln57, i2 %i_load" [matrixmul.cpp:57]   --->   Operation 32 'select' 'select_ln57_1' <Predicate = (!icmp_ln57)> <Delay = 0.50> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "%zext_ln63 = zext i2 %select_ln57_1" [matrixmul.cpp:63]   --->   Operation 33 'zext' 'zext_ln63' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%tmp = bitconcatenate i4 @_ssdm_op_BitConcatenate.i4.i2.i2, i2 %select_ln57_1, i2 0" [matrixmul.cpp:63]   --->   Operation 34 'bitconcatenate' 'tmp' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (1.06ns)   --->   "%sub_ln63 = sub i4 %tmp, i4 %zext_ln63" [matrixmul.cpp:63]   --->   Operation 35 'sub' 'sub_ln63' <Predicate = (!icmp_ln57)> <Delay = 1.06> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node and_ln57)   --->   "%xor_ln57 = xor i1 %icmp_ln59, i1 1" [matrixmul.cpp:57]   --->   Operation 36 'xor' 'xor_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.31> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.64ns)   --->   "%icmp_ln62 = icmp_eq  i2 %k_load, i2 3" [matrixmul.cpp:62]   --->   Operation 37 'icmp' 'icmp_ln62' <Predicate = (!icmp_ln57)> <Delay = 0.64> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.64> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.31ns) (out node of the LUT)   --->   "%and_ln57 = and i1 %icmp_ln62, i1 %xor_ln57" [matrixmul.cpp:57]   --->   Operation 38 'and' 'and_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.31> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.31> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 39 [1/1] (0.72ns)   --->   "%add_ln59 = add i2 %select_ln57, i2 1" [matrixmul.cpp:59]   --->   Operation 39 'add' 'add_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.72> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 40 [1/1] (0.31ns)   --->   "%or_ln59 = or i1 %and_ln57, i1 %icmp_ln59" [matrixmul.cpp:59]   --->   Operation 40 'or' 'or_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.31> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.31> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 41 [1/1] (0.50ns)   --->   "%select_ln59 = select i1 %or_ln59, i2 0, i2 %k_load" [matrixmul.cpp:59]   --->   Operation 41 'select' 'select_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.50> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 42 [1/1] (0.50ns)   --->   "%select_ln59_2 = select i1 %and_ln57, i2 %add_ln59, i2 %select_ln57" [matrixmul.cpp:59]   --->   Operation 42 'select' 'select_ln59_2' <Predicate = (!icmp_ln57)> <Delay = 0.50> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 43 [1/1] (0.00ns)   --->   "%zext_ln60 = zext i2 %select_ln59_2" [matrixmul.cpp:60]   --->   Operation 43 'zext' 'zext_ln60' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 44 [1/1] (1.06ns)   --->   "%add_ln60 = add i4 %sub_ln63, i4 %zext_ln60" [matrixmul.cpp:60]   --->   Operation 44 'add' 'add_ln60' <Predicate = (!icmp_ln57)> <Delay = 1.06> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "%zext_ln63_1 = zext i2 %select_ln59" [matrixmul.cpp:63]   --->   Operation 45 'zext' 'zext_ln63_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (1.06ns)   --->   "%add_ln63_1 = add i4 %sub_ln63, i4 %zext_ln63_1" [matrixmul.cpp:63]   --->   Operation 46 'add' 'add_ln63_1' <Predicate = (!icmp_ln57)> <Delay = 1.06> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 47 [1/1] (0.00ns)   --->   "%zext_ln63_2 = zext i4 %add_ln63_1" [matrixmul.cpp:63]   --->   Operation 47 'zext' 'zext_ln63_2' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 48 [1/1] (0.00ns)   --->   "%a_addr = getelementptr i8 %a, i64 0, i64 %zext_ln63_2" [matrixmul.cpp:63]   --->   Operation 48 'getelementptr' 'a_addr' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_1 = bitconcatenate i4 @_ssdm_op_BitConcatenate.i4.i2.i2, i2 %select_ln59, i2 0" [matrixmul.cpp:63]   --->   Operation 49 'bitconcatenate' 'tmp_1' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 50 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%sub_ln63_1 = sub i4 %tmp_1, i4 %zext_ln63_1" [matrixmul.cpp:63]   --->   Operation 50 'sub' 'sub_ln63_1' <Predicate = (!icmp_ln57)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.37> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 51 [1/1] (0.74ns) (root node of TernaryAdder)   --->   "%add_ln63_2 = add i4 %sub_ln63_1, i4 %zext_ln60" [matrixmul.cpp:63]   --->   Operation 51 'add' 'add_ln63_2' <Predicate = (!icmp_ln57)> <Delay = 0.74> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.37> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_1 : Operation 52 [1/1] (0.00ns)   --->   "%zext_ln63_3 = zext i4 %add_ln63_2" [matrixmul.cpp:63]   --->   Operation 52 'zext' 'zext_ln63_3' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 53 [1/1] (0.00ns)   --->   "%b_addr = getelementptr i8 %b, i64 0, i64 %zext_ln63_3" [matrixmul.cpp:63]   --->   Operation 53 'getelementptr' 'b_addr' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 54 [2/2] (0.85ns)   --->   "%a_load = load i4 %a_addr" [matrixmul.cpp:63]   --->   Operation 54 'load' 'a_load' <Predicate = (!icmp_ln57)> <Delay = 0.85> <CoreInst = "RAM">   --->   Core 83 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 9> <RAM>
ST_1 : Operation 55 [2/2] (0.85ns)   --->   "%b_load = load i4 %b_addr" [matrixmul.cpp:63]   --->   Operation 55 'load' 'b_load' <Predicate = (!icmp_ln57)> <Delay = 0.85> <CoreInst = "RAM">   --->   Core 83 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 9> <RAM>
ST_1 : Operation 56 [1/1] (0.72ns)   --->   "%add_ln62 = add i2 %select_ln59, i2 1" [matrixmul.cpp:62]   --->   Operation 56 'add' 'add_ln62' <Predicate = (!icmp_ln57)> <Delay = 0.72> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 57 [1/1] (0.64ns)   --->   "%icmp_ln62_1 = icmp_eq  i2 %add_ln62, i2 3" [matrixmul.cpp:62]   --->   Operation 57 'icmp' 'icmp_ln62_1' <Predicate = (!icmp_ln57)> <Delay = 0.64> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.64> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 58 [1/1] (0.00ns)   --->   "%br_ln62 = br i1 %icmp_ln62_1, void %ifFalse, void %ifTrue" [matrixmul.cpp:62]   --->   Operation 58 'br' 'br_ln62' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 59 [1/1] (0.00ns)   --->   "%indvar_flatten_load = load i4 %indvar_flatten" [matrixmul.cpp:59]   --->   Operation 59 'load' 'indvar_flatten_load' <Predicate = (!icmp_ln57)> <Delay = 0.00>
ST_1 : Operation 60 [1/1] (1.06ns)   --->   "%add_ln59_1 = add i4 %indvar_flatten_load, i4 1" [matrixmul.cpp:59]   --->   Operation 60 'add' 'add_ln59_1' <Predicate = (!icmp_ln57)> <Delay = 1.06> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.06> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 61 [1/1] (0.32ns)   --->   "%select_ln59_3 = select i1 %icmp_ln59, i4 1, i4 %add_ln59_1" [matrixmul.cpp:59]   --->   Operation 61 'select' 'select_ln59_3' <Predicate = (!icmp_ln57)> <Delay = 0.32> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_1 : Operation 62 [1/1] (0.62ns)   --->   "%store_ln57 = store i5 %add_ln57_1, i5 %indvar_flatten15" [matrixmul.cpp:57]   --->   Operation 62 'store' 'store_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.62>
ST_1 : Operation 63 [1/1] (0.62ns)   --->   "%store_ln57 = store i2 %select_ln57_1, i2 %i" [matrixmul.cpp:57]   --->   Operation 63 'store' 'store_ln57' <Predicate = (!icmp_ln57)> <Delay = 0.62>
ST_1 : Operation 64 [1/1] (0.62ns)   --->   "%store_ln59 = store i4 %select_ln59_3, i4 %indvar_flatten" [matrixmul.cpp:59]   --->   Operation 64 'store' 'store_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.62>
ST_1 : Operation 65 [1/1] (0.62ns)   --->   "%store_ln59 = store i2 %select_ln59_2, i2 %j" [matrixmul.cpp:59]   --->   Operation 65 'store' 'store_ln59' <Predicate = (!icmp_ln57)> <Delay = 0.62>
ST_1 : Operation 66 [1/1] (0.62ns)   --->   "%store_ln62 = store i2 %add_ln62, i2 %k" [matrixmul.cpp:62]   --->   Operation 66 'store' 'store_ln62' <Predicate = (!icmp_ln57)> <Delay = 0.62>
ST_1 : Operation 86 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 86 'ret' 'ret_ln0' <Predicate = (icmp_ln57)> <Delay = 0.00>

State 2 <SV = 1> <Delay = 5.86>
ST_2 : Operation 67 [1/1] (0.00ns)   --->   "%p_load = load i16 %empty" [matrixmul.cpp:59]   --->   Operation 67 'load' 'p_load' <Predicate = (!or_ln59)> <Delay = 0.00>
ST_2 : Operation 68 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @Row_Col_Product_str"   --->   Operation 68 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 69 [1/1] (0.00ns)   --->   "%empty_7 = speclooptripcount i32 @_ssdm_op_SpecLoopTripCount, i64 27, i64 27, i64 27"   --->   Operation 69 'speclooptripcount' 'empty_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 70 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @Col_Product_str"   --->   Operation 70 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 71 [1/1] (0.51ns)   --->   "%select_ln59_1 = select i1 %or_ln59, i16 0, i16 %p_load" [matrixmul.cpp:59]   --->   Operation 71 'select' 'select_ln59_1' <Predicate = true> <Delay = 0.51> <CoreInst = "Sel">   --->   Core 73 'Sel' <Latency = 0> <II = 1> <Delay = 0.32> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 72 [1/1] (0.00ns)   --->   "%zext_ln60_1 = zext i4 %add_ln60" [matrixmul.cpp:60]   --->   Operation 72 'zext' 'zext_ln60_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 73 [1/1] (0.00ns)   --->   "%res_addr = getelementptr i16 %res, i64 0, i64 %zext_ln60_1" [matrixmul.cpp:60]   --->   Operation 73 'getelementptr' 'res_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 74 [1/1] (0.00ns)   --->   "%specpipeline_ln62 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_0" [matrixmul.cpp:62]   --->   Operation 74 'specpipeline' 'specpipeline_ln62' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 75 [1/1] (0.00ns)   --->   "%specloopname_ln62 = specloopname void @_ssdm_op_SpecLoopName, void @empty_3" [matrixmul.cpp:62]   --->   Operation 75 'specloopname' 'specloopname_ln62' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 76 [1/2] (0.85ns)   --->   "%a_load = load i4 %a_addr" [matrixmul.cpp:63]   --->   Operation 76 'load' 'a_load' <Predicate = true> <Delay = 0.85> <CoreInst = "RAM">   --->   Core 83 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 9> <RAM>
ST_2 : Operation 77 [1/1] (0.00ns)   --->   "%sext_ln63 = sext i8 %a_load" [matrixmul.cpp:63]   --->   Operation 77 'sext' 'sext_ln63' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 78 [1/2] (0.85ns)   --->   "%b_load = load i4 %b_addr" [matrixmul.cpp:63]   --->   Operation 78 'load' 'b_load' <Predicate = true> <Delay = 0.85> <CoreInst = "RAM">   --->   Core 83 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 8> <Depth = 9> <RAM>
ST_2 : Operation 79 [1/1] (0.00ns)   --->   "%sext_ln63_1 = sext i8 %b_load" [matrixmul.cpp:63]   --->   Operation 79 'sext' 'sext_ln63_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 80 [1/1] (1.32ns) (grouped into DSP with root node add_ln63)   --->   "%mul_ln63 = mul i16 %sext_ln63_1, i16 %sext_ln63" [matrixmul.cpp:63]   --->   Operation 80 'mul' 'mul_ln63' <Predicate = true> <Delay = 1.32> <CoreInst = "DSP48">   --->   Core 127 'DSP48' <Latency = 0> <II = 1> <Delay = 4.14> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 81 [1/1] (2.82ns) (root node of the DSP)   --->   "%add_ln63 = add i16 %mul_ln63, i16 %select_ln59_1" [matrixmul.cpp:63]   --->   Operation 81 'add' 'add_ln63' <Predicate = true> <Delay = 2.82> <CoreInst = "DSP48">   --->   Core 127 'DSP48' <Latency = 0> <II = 1> <Delay = 4.14> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 82 [1/1] (0.85ns)   --->   "%store_ln63 = store i16 %add_ln63, i4 %res_addr" [matrixmul.cpp:63]   --->   Operation 82 'store' 'store_ln63' <Predicate = (icmp_ln62_1)> <Delay = 0.85> <CoreInst = "RAM">   --->   Core 83 'RAM' <Latency = 1> <II = 1> <Delay = 0.85> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 9> <RAM>
ST_2 : Operation 83 [1/1] (0.00ns)   --->   "%br_ln0 = br void %ifFalse"   --->   Operation 83 'br' 'br_ln0' <Predicate = (icmp_ln62_1)> <Delay = 0.00>
ST_2 : Operation 84 [1/1] (0.62ns)   --->   "%store_ln63 = store i16 %add_ln63, i16 %empty" [matrixmul.cpp:63]   --->   Operation 84 'store' 'store_ln63' <Predicate = true> <Delay = 0.62>
ST_2 : Operation 85 [1/1] (0.00ns)   --->   "%br_ln0 = br void"   --->   Operation 85 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 13.3ns, clock uncertainty: 3.6ns.

 <State 1>: 4.53ns
The critical path consists of the following:
	'alloca' operation ('indvar_flatten') [7]  (0 ns)
	'load' operation ('indvar_flatten_load_1', matrixmul.cpp:59) on local variable 'indvar_flatten' [29]  (0 ns)
	'icmp' operation ('icmp_ln59', matrixmul.cpp:59) [34]  (1.03 ns)
	'select' operation ('select_ln57_1', matrixmul.cpp:57) [36]  (0.509 ns)
	'sub' operation ('sub_ln63', matrixmul.cpp:63) [39]  (1.06 ns)
	'add' operation ('add_ln63_1', matrixmul.cpp:63) [54]  (1.06 ns)
	'getelementptr' operation ('a_addr', matrixmul.cpp:63) [56]  (0 ns)
	'load' operation ('a_load', matrixmul.cpp:63) on array 'a' [64]  (0.858 ns)

 <State 2>: 5.86ns
The critical path consists of the following:
	'load' operation ('a_load', matrixmul.cpp:63) on array 'a' [64]  (0.858 ns)
	'mul' operation of DSP[69] ('mul_ln63', matrixmul.cpp:63) [68]  (1.32 ns)
	'add' operation of DSP[69] ('add_ln63', matrixmul.cpp:63) [69]  (2.83 ns)
	'store' operation ('store_ln63', matrixmul.cpp:63) of variable 'add_ln63', matrixmul.cpp:63 on array 'res' [74]  (0.858 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
